@import "util";

@mixin class($class-name) {
	.#{$screen-type-tag}#{$class-name} {
		@content;
	}
}

@mixin defineClass($class-name, $css-property, $value, $unit : null, $important: true) {
	@if $value==0 or $unit==null {
		$unit: "";
	}

	@include class($class-name) {
		@include setProperty($css-property, unquote($value+""+$unit), $important);
	}
}

@mixin setProperty($property, $value, $important: true) {
	#{$property}: #{$value} #{if($important, '!important', null)};
}

@mixin definePercentagesClassList($class-name, $css-property, $negative: false) {
	@include defineLoopingClassList($class-name, $css-property, 20, 5, 0, '%', 1, $negative);
}

@mixin defineClassList($list, $class-name, $css-property, $unit: null, $with-events: false) {

	@if $class-name == null {
		$class-name: "";
	}

	@each $element in $list {

		@if $element == null {
			$element: "";
		}

		$name: str_replace(unquote($class-name + ""+ $element), ' ', '-');

		@if $with-events {
			@include defineClassWithEvents($name, $css-property, $element, $unit);
		}

		@else {
			@include defineClass($name, $css-property, $element, $unit);
		}
	}
}


@mixin defineClassWithEvents($class-name, $css-property, $value, $unit : null) {
	$screen-tag: "";

	@if $screen-type-tag {
		$screen-tag: $screen-type-tag;
	}

	@include defineClass($class-name, $css-property, $value, $unit);
	@include defineClass(unquote("hover\\:"+$class-name+":hover"), $css-property, $value, $unit);
	@include defineClass(unquote("focus\\:"+$class-name+":focus"), $css-property, $value, $unit);
	@include defineClass(unquote("group:focus ."+$screen-tag+"group-focus\\:"+$class-name), $css-property, $value, $unit);
}


@mixin defineClassListUsingMap($class-map, $events: false) {

	@each $label,
		$map in $class-map {

		@if ($events) {
			@include defineClassWithEvents($label, map-get($map, property), map-get($map, value));
		}

		@else {
			@include defineClass($label, map-get($map, property), map-get($map, value));
		}

	}
}


@mixin remSizesGenerator($list, $class-name, $css-property, $negative: false) {

	@each $size in $list {
		$val: $size * 0.25;

		@if (notNegativeZero(negativeValue($size, $negative), $negative)) {
			@include defineClass(unquote(negativeClassName($class-name, $negative)+"-"+$size), $css-property, negativeValue($val, $negative), 'rem');
		}
	}
}

@mixin defineLoopingClassList($class-name, $css-property, $iterations, $step: 1, $from: 0, $unit: null, $name-multiplier: 1, $negative: false) {
	@for $i from $from through $iterations {
		$val: $i * $step;

		@if (notNegativeZero(negativeValue($i, $negative), $negative)) {
			@include defineClass(unquote($class-name+"-"+($val * $name-multiplier)), $css-property, negativeValue($val, $negative), $unit);
		}
	}
}

@mixin defineOnMultipleClasses($list, $css-property, $value, $unit : null, $important: true) {
	@each $class-name in $list {
		@include defineClass($class-name, $css-property, $value, $unit, $important);
	}
}