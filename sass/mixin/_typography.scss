@import "fonts";
@import "../toolkits/helpers";

@mixin typography {
        @include fonts;
        @include textAlignment;
        @include textSize;
        @include lineHeights;
        @include breakWords;
        @include whitespaces;
        @include typographyExtra;
        @include letterSpacing;
}


@mixin textSize {
        $min-size: 4;
        $text-size-list: 'xxs', 'xs', 'sm', 'base', 'lg', 'xl', '2xl', '3xl', '4xl', '5xl', '6xl', '8xl', '9xl', '10xl', '11xl', '12xl', '13xl', '14xl';

        $bigger-size: 0;

        @for $i from 1 through length($text-size-list) {
                @if $i>6 {
                        $bigger-size: 1 + $bigger-size;
                        $min-size: 4 + ($bigger-size * 2);
                }

                $size: nth($text-size-list, $i);
                $value: 0.125 * ($min-size + $i);
                @include defineClass(unquote("text-"+$size), font-size, $value, 'rem');
        }

}


@mixin textAlignment {
        @include defineClassList(list('center', 'justify', 'left', 'right'), text-, text-align);
}

@mixin textStyle {

        @include defineClass(italic, font-style, italic);
        @include defineClass(roman, font-style, normal);
        @include defineClass(uppercase, text-transform, uppercase);
        @include defineClass(lowercase, text-transform, lowercase);
        @include defineClass(capitalize, text-transform, capitalize);
        @include defineClassWithEvents(normal-case, text-transform, none);
        @include defineClassWithEvents(line-through, text-decoration, line-through);
        @include defineClassWithEvents(no-underline, text-decoration, none);

        @include class(antialiased) {
                -webkit-font-smoothing: antialiased !important;
                -moz-osx-font-smoothing: grayscale !important;
        }

        @include class(subpixel-antialiased) {
                -webkit-font-smoothing: auto;
                -moz-osx-font-smoothing: auto;
        }
}

@mixin lineHeights {

        $line-height-map: (leading-none:(property: line-height,
                                value: 1),
                        leading-tight:(property: line-height,
                                value: 1.25),
                        leading-snug:(property: line-height,
                                value: 1.375),
                        leading-normal:(property: line-height,
                                value: 1.5),
                        leading-relaxed:(property: line-height,
                                value: 1.625),
                        leading-loose:(property: line-height,
                                value:2));

        @include defineClassListUsingMap($line-height-map);

}

@mixin breakWords {
        @include defineClass(break-words, word-wrap, break-word);
        @include defineClass(break-words, word-break, break-all);
        @include defineClass(break-all, word-break, break-all);
        @include defineClass(break-normal, word-wrap, normal);

        @include class(truncate) {
                overflow: hidden !important;
                text-overflow: ellipsis !important;
                white-space: nowrap !important;
        }
}

@mixin whitespaces {
        @include defineClassList(list('normal', 'pre', 'pre-line', 'pre-wrap'), whitespace-, white-space);
        @include defineClass(whitespace-no-wrap, whitespace, nowrap);

}

@mixin typographyExtra {
        @include defineClass(text-muted, color, #6c757d);
        @include defineClass(inherit-color, color, inherit);
}

@mixin letterSpacing {
        $map: (tracking-tighter:(property: letter-spacing,
                                value: -.05em), tracking-tight:(property: letter-spacing,
                                value: -.025em), tracking-normal:(property: letter-spacing,
                                value: 0), tracking-wide:(property: letter-spacing,
                                value: .025em), tracking-wider:(property: letter-spacing,
                                value: .05em), tracking-widest:(property: letter-spacing,
                                value: .1em));
        @include defineClassListUsingMap($map);
}